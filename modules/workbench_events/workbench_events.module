<?php

/**
 * @file
 * workbench_events module
 *
 * This module allows styles to be created and managed on behalf of modules
 * that implement styles.
 *
 * The workbench_events tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.
 */

/**
 * Implementation of hook_permission()
 */
function workbench_events_permission() {
  return array(
    'administer workbench events' => array(
      'title' => t('Administer workbench events'),
      'description' => t(''),
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function workbench_events_ctools_plugin_directory($module, $plugin) {
  // Most of this module is implemented as an export ui plugin, and the
  // rest is in ctools/includes/workbench_events.inc
  if ($module == 'ctools' && ($plugin == 'export_ui')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * @todo document.
 */
function workbench_events_event_access($event_machine_name, $node) {

  ctools_include('export');
  ctools_include('context');
  $node_context = ctools_context_create('entity:node', $node);
  $event = ctools_export_crud_load('workbench_events', $event_machine_name);

  $contexts = ctools_context_match_required_contexts($event->requiredcontexts, array($node_context));
  $contexts = ctools_context_load_contexts($event, FALSE, $contexts);

  if (!ctools_access($event->access, $contexts)) {
    return FALSE;
  } else {
    return workbench_states_state_access($event->target_state, $node);
  }
}
