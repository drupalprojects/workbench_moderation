<?php

function workbench_moderation_exportables_permission() {
  return array(
    'administer_workbench_moderation_exportables' => array(
      'title' => t('Administer workbench moderation exportables'),
      'description' => t(''),
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function workbench_moderation_exportables_ctools_plugin_directory($module, $plugin) {
  // Most of this module is implemented as an export ui plugin, and the
  // rest is in ctools/includes/workbench_states.inc
  if ($module == 'ctools' && ($plugin == 'export_ui')) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Create an array of exportable states/events/workflows suitable for FAPI.
 *
 * @param string $type
 *   Allowed values are 'states', 'events', and 'workflows'
 * @param string $name
 *   The machine name of the exportable.
 * @param $reset
 *   A boolean for whether the static cache should be reset.
 */
function workbench_moderation_exportables_options($type = 'states', $label_key = 'admin_title', $reset = FALSE) {

  // load all objects of this type
  $exportables = workbench_moderation_exportables_load_all($type, $reset);

  $return = array();
  foreach($exportables as $exportable) {
    $return[$exportable->name] = $exportable->{$label_key};
  }

  return $return;
}

/**
 * @todo document.
 */
function workbench_moderation_exportables_exportable_access($entity, $exportable, $exportable_type = 'states') {

  $contexts = array();

  // The exportable might already be the loaded object.
  if (is_string($exportable)) {
    ctools_include('export');
    $exportable = workbench_moderation_exportables_load($exportable_type, $exportable);
  }

  // Create a CTools context.
  if (!empty($exportable->requiredcontexts[0]['name'])) {
    ctools_include('context');
    $contexts[] = ctools_context_create($exportable->requiredcontexts[0]['name'], $entity);
  }

  // Load all the contexts.
  // @todo, we may need a user context other than "currently logged-in user."
  $contexts = ctools_context_match_required_contexts($exportable->requiredcontexts, $contexts);
  $contexts = ctools_context_load_contexts($exportable, FALSE, $contexts);

  return ctools_access($exportable->access, $contexts);
}

/**
 * Load a single workbench moderation exportable.
 *
 * @param string $type
 *   Allowed values are 'states', 'events', and 'workflows'
 * @param string $name
 *   The machine name of the exportable.
 * Returns a CTools exportable object.
 */
function workbench_moderation_exportables_load($type, $name) {
  $cache = &drupal_static('workbench_moderation_exportables_load_all', array());

  // We use array_key_exists because failed loads will be NULL and
  // isset() will try to load it again.
  if (empty($cache[$type]) || !array_key_exists($name, $cache[$type])) {
    ctools_include('export');
    $result = ctools_export_load_object('workbench_moderation_exportables_' . $type, 'names', array($name));
    if (isset($result[$name])) {
      $cache[$type][$name] = $result[$name];
    }
    else {
      $cache[$type][$name] = NULL;
    }
  }

  if (isset($cache[$type][$name])) {
    return $cache[$type][$name];
  }
}

/**
 * Load a single workbench moderation exportable.
 *
 * @param string $type
 *   Allowed values are 'states', 'events', and 'workflows'
 * @param string $name
 *   The machine name of the exportable.
 * @param $reset
 *   A boolean for whether the static cache should be reset.
 * Returns a CTools exportable object.
 */
function workbench_moderation_exportables_load_all($type = 'states', $reset = FALSE) {

  $cache = &drupal_static('workbench_moderation_exportables_load_all', array());

  // We check our own private static because individual minis could have
  // been loaded prior to load all and we need to know that.
  if (empty($cache[$type]) || $reset) {
    $all_loaded = TRUE;
    if ($reset) {
      $cache = array();
    }

    ctools_include('export');
    $type_exportables = ctools_export_load_object('workbench_moderation_exportables_' . $type);

    // @todo, getting errors when used on non-workflows.
    // fix that.
    if ($type == 'workflows') {
      uasort($type_exportables, 'ctools_plugin_sort');
    }

    $cache[$type] = $type_exportables;
  }

  return $cache[$type];
}

/**
 * Implements hook_menu().
 */
function workbench_moderation_exportables_menu() {

  $items = array();

  // Module settings.
  $items["admin/structure/wm-exportables"] = array(
    'title' => 'Workbench Moderation Exportables',
    'description' => 'Configure moderation states, events and workflows.',
    'page callback' => 'workbench_moderation_exportables_admin_page',
    'access arguments' => array('administer_workbench_moderation_exportables'),
    'file' => 'workbench_moderation_exportables.admin.inc',
  );
  $items['admin/structure/wm-exportables/general'] = array(
    'title' => 'Workbench Moderation Exportables',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}
