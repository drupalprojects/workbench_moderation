<?php

/**
 * @file workbench_workflows.module
 */


/**
 * Implements hook_state_flow_plugins().
 */
function workbench_workflows_state_flow_plugins() {
  module_load_include('inc', 'workbench_workflows', 'workbench_workflows.state_flow');
  return _workbench_workflows_state_flow_plugins();
}

/**
 * Implements hook_state_flow_machine_type_alter()
 *
 * @todo, this hook currently uses $node but will likely switch to $entity eventually.
 */
function workbench_workflows_state_flow_machine_type_alter( &$machine_type, $node) {

  module_load_include('inc', 'workbench_workflows', 'workbench_workflows.state_flow');
  $workflow = workbench_workflows_select_workflow($node);
  if (!empty($workflow->name)) {
    $machine_type = 'workbench_workflows__' . $workflow->name;
  }
}

/**
 * Guard callback for the workbenchStates publish and unpublish events.
 */
function workbench_workflows_guard($event) {

  $entity = $event->get_machine()->get_object();
  // Check if this is prohibited based on the events rules.
  if (!workbench_moderation_exportables_exportable_access($entity, $event->name, 'events')) {
    return FALSE;
  } else {
    return workbench_moderation_exportables_exportable_access($entity, $event->get_option('target'), 'states');
  }
}
