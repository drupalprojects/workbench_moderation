<?php

/**
 * @file
 * Contains moderation_state.module.
 *
 * @todo include UI bits of https://www.drupal.org/node/2429153
 * @todo How to remove the live version (i.e. published => draft without new
 *   revision) - i.e. unpublish
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\moderation_state\BaseFieldInfo;
use Drupal\moderation_state\NodeEventSubscriber;
use Drupal\moderation_state\Plugin\Menu\EditTab;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_help().
 */
function moderation_state_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the moderation_state module.
    case 'help.page.moderation_state':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides moderation states for content') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function moderation_state_entity_base_field_info(EntityTypeInterface $entity_type) {
  $base_field_info = new BaseFieldInfo();
  return $base_field_info->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_entity_type_alter().
 */
function moderation_state_entity_type_alter(array &$entity_types) {
  \Drupal::service('moderation_state.entity_type')->entityTypeAlter($entity_types);
}

/**
 * Entity builder for the node type edit form with third party options.
 *
 * @see moderation_state_form_node_type_form_alter()
 */
function moderation_state_node_type_form_builder($entity_type, NodeTypeInterface $node_type, &$form, FormStateInterface $form_state) {
  // @todo write a test for this.
  $node_type->setThirdPartySetting('moderation_state', 'enabled', $form_state->getValue('enable_moderation_state'));
  $node_type->setThirdPartySetting('moderation_state', 'allowed_moderation_states', array_keys(array_filter($form_state->getValue('allowed_moderation_states'))));
  $node_type->setThirdPartySetting('moderation_state', 'default_moderation_state', $form_state->getValue('default_moderation_state'));
}

/**
 * Sets required flag based on enabled state.
 */
function moderation_state_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'node' && !empty($fields['moderation_state'])) {
    /* @var NodeTypeInterface $node_type */
    $node_type = NodeType::load($bundle);
    if ($node_type->getThirdPartySetting('moderation_state', 'enabled', FALSE)) {
      /* @var \Drupal\Core\Field\FieldDefinitionInterface $field */
      // @todo write a test for this.
      $fields['moderation_state']->addConstraint('ModerationState', []);
    }
  }
}

/**
 * Acts on a node and set the published status based on the moderation state.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node being saved.
 */
function moderation_state_node_presave(NodeInterface $node) {
  $node_event_subscriber = new NodeEventSubscriber(\Drupal::entityTypeManager());
  $node_event_subscriber->nodePresave($node);
}

/**
 * Implements hook_local_tasks_alter().
 */
function moderation_state_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.node.edit_form']['class'] = EditTab::class;
}
