<?php

/**
 * @file
 * Contains moderation_state.module.
 *
 * @todo include UI bits of https://www.drupal.org/node/2429153
 * @todo How to remove the live version (i.e. published => draft without new
 *   revision) - i.e. unpublish
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\moderation_state\BaseFieldInfo;
use Drupal\moderation_state\Plugin\Menu\EditTab;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function moderation_state_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the moderation_state module.
    case 'help.page.moderation_state':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides moderation states for content') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function moderation_state_entity_base_field_info(EntityTypeInterface $entity_type) {
  $base_field_info = new BaseFieldInfo();
  return $base_field_info->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_entity_type_alter().
 */
function moderation_state_entity_type_alter(array &$entity_types) {
  \Drupal::service('moderation_state.entity_type')->entityTypeAlter($entity_types);
}

/**
 * Implements hook_entity_operation().
 */
function moderation_state_entity_operation(EntityInterface $entity) {
  return \Drupal::service('moderation_state.entity_type')->entityOperation($entity);
}

/**
 * Sets required flag based on enabled state.
 */
function moderation_state_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  return \Drupal::service('moderation_state.entity_type')->entityBundleFieldInfoAlter($fields, $entity_type, $bundle);
}

/**
 * Implements hook_entity_presave().
 */
function moderation_state_entity_presave(EntityInterface $entity) {
  return \Drupal::service('moderation_state.entity_operations')->entityPresave($entity);
}

/**
 * Implements hook_local_tasks_alter().
 */
function moderation_state_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.node.edit_form']['class'] = EditTab::class;
}

/**
 * Implements hook_form_alter().
 */
function moderation_state_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // We really shouldn't be checking for a base class, but core lacks an
  // interface here. When core adds a better way to determine if we're on
  // a Bundle configuration form we should switch to that.
  if ($form_state->getFormObject() instanceof \Drupal\Core\Entity\BundleEntityFormBase) {
    $bundle_of = $form_state->getFormObject()->getEntity()->getEntityType()->getBundleOf();
    $type = \Drupal::entityTypeManager()->getDefinition($bundle_of);
    $revisionable = $type->isRevisionable();

    if ($revisionable) {
      dpm($form_id);
    }
    /*
    (new BundleFormAlter($form_state->getFormObject()->getEntity()))
      ->formAlter($form, $form_state);
    */
  }
}
