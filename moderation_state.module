<?php

/**
 * @file
 * Contains moderation_state.module.
 *
 * @todo include UI bits of https://www.drupal.org/node/2429153
 * @todo How to remove the live version (i.e. published => draft without new
 *   revision) - i.e. unpublish
 */

use Drupal\Core\Entity\Annotation\EntityType;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\moderation_state\BaseFieldInfo;
use Drupal\moderation_state\NodeEventSubscriber;
use Drupal\moderation_state\Plugin\Menu\EditTab;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_help().
 */
function moderation_state_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the moderation_state module.
    case 'help.page.moderation_state':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides moderation states for content') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function moderation_state_entity_base_field_info(EntityTypeInterface $entity_type) {
  $base_field_info = new BaseFieldInfo();
  return $base_field_info->entityBaseFieldInfo($entity_type);
}

/**
 * Implements hook_entity_type_alter().
 */
function moderation_state_entity_type_alter(array &$entity_types) {

  $bundleable_config_entity_filter = new \CallbackFilterIterator(new \ArrayIterator($entity_types), function(EntityType $current, $key) {
    return (bool)$current->get('bundle_of');
  });

  $revisionable_entity_filter = new \CallbackFilterIterator($bundleable_config_entity_filter, function(EntityType $current, $key) use ($entity_types) {
    /** @var ContentEntityType $content_entity */
    $content_entity = $entity_types[$current->get('bundle_of')];
    return $content_entity->isRevisionable();
  });

  foreach ($revisionable_entity_filter as $type_name => $type) {
    dpm($type_name);
    // @todo Add another form handler and link, and a route provider to generate routes to the new form.
  }

}


/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function moderation_state_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  // @todo write a test for this.
  /* @var NodeTypeInterface $node_type */
  $node_type = $form_state->getFormObject()->getEntity();
  $form['workflow']['enable_moderation_state'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable moderation states.'),
    '#description' => t('Content of this type must transition through moderation states in order to be published.'),
    '#default_value' => $node_type->getThirdPartySetting('moderation_state', 'enabled', FALSE),
  ];
  $states = \Drupal::entityTypeManager()->getStorage('moderation_state')->loadMultiple();
  $options = [];
  foreach ($states as $key => $state) {
    $options[$key] = $state->label() . ' ' . ($state->isPublished() ? t('(published)') : t('(non-published)'));
  }
  $form['workflow']['allowed_moderation_states'] = [
    '#type' => 'checkboxes',
    '#title' => t('Allowed moderation states.'),
    '#description' => t('The allowed moderation states this content-type can be assigned. You must select at least one published and one non-published state.'),
    '#default_value' => $node_type->getThirdPartySetting('moderation_state', 'allowed_moderation_states', []),
    '#options' => $options,
    '#states' => [
      'visible' => [
        ':input[name=enable_moderation_state]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['workflow']['default_moderation_state'] = [
    '#type' => 'select',
    '#title' => t('Default moderation state'),
    '#empty_option' => t('-- Select --'),
    '#options' => $options,
    '#description' => t('Select the moderation state for new content'),
    '#default_value' => $node_type->getThirdPartySetting('moderation_state', 'default_moderation_state', ''),
    '#states' => [
      'visible' => [
        ':input[name=enable_moderation_state]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['#entity_builders'][] = 'moderation_state_node_type_form_builder';
  $form['#validate'][] = 'moderation_state_node_type_form_validate';
}

/**
 * Validation function for node-type form.
 */
function moderation_state_node_type_form_validate(array $form, FormStateInterface $form_state) {
  // @todo write a test for this.
  if ($form_state->getValue('enable_moderation_state')) {
    $states = \Drupal::entityTypeManager()->getStorage('moderation_state')->loadMultiple();
    $published = FALSE;
    $non_published = TRUE;
    $allowed = array_keys(array_filter($form_state->getValue('allowed_moderation_states')));
    foreach ($allowed as $state_id) {
      $state = $states[$state_id];
      if ($state->isPublished()) {
        $published = TRUE;
      }
      else {
        $non_published = TRUE;
      }
    }
    if (!$published || !$non_published) {
      $form_state->setErrorByName('allowed_moderation_states', t('You must select at least one published moderation and one non-published state.'));
    }
    if (($default = $form_state->getValue('default_moderation_state')) && !empty($default)) {
      if (!in_array($default, $allowed, TRUE)) {
        $form_state->setErrorByName('default_moderation_state', t('The default moderation state must be one of the allowed states.'));
      }
    }
    else {
      $form_state->setErrorByName('default_moderation_state', t('You must select a default moderation state.'));
    }
  }
}

/**
 * Entity builder for the node type edit form with third party options.
 *
 * @see moderation_state_form_node_type_form_alter()
 */
function moderation_state_node_type_form_builder($entity_type, NodeTypeInterface $node_type, &$form, FormStateInterface $form_state) {
  // @todo write a test for this.
  $node_type->setThirdPartySetting('moderation_state', 'enabled', $form_state->getValue('enable_moderation_state'));
  $node_type->setThirdPartySetting('moderation_state', 'allowed_moderation_states', array_keys(array_filter($form_state->getValue('allowed_moderation_states'))));
  $node_type->setThirdPartySetting('moderation_state', 'default_moderation_state', $form_state->getValue('default_moderation_state'));
}

/**
 * Sets required flag based on enabled state.
 */
function moderation_state_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'node' && !empty($fields['moderation_state'])) {
    /* @var NodeTypeInterface $node_type */
    $node_type = NodeType::load($bundle);
    if ($node_type->getThirdPartySetting('moderation_state', 'enabled', FALSE)) {
      /* @var \Drupal\Core\Field\FieldDefinitionInterface $field */
      // @todo write a test for this.
      $fields['moderation_state']->addConstraint('ModerationState', []);
    }
  }
}

/**
 * Acts on a node and set the published status based on the moderation state.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node being saved.
 */
function moderation_state_node_presave(NodeInterface $node) {
  $node_event_subscriber = new NodeEventSubscriber(\Drupal::entityTypeManager());
  $node_event_subscriber->nodePresave($node);
}

/**
 * Implements hook_local_tasks_alter().
 */
function moderation_state_local_tasks_alter(&$local_tasks) {
  $local_tasks['entity.node.edit_form']['class'] = EditTab::class;
}
